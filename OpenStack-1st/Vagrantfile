# -*- mode: ruby -*-
# vi: set ft=ruby :

class Node
  def initialize(hostname, internal_interfaces, ssh_nat_port, bridged_interface = "")
    @hostname=hostname
    @interfaces=internal_interfaces
    @ssh_nat_port=ssh_nat_port
    @bridged_interface=bridged_interface
  end 

  def get_hostname
    return "#{@hostname}"
  end 

  def get_interfaces
    return @interfaces
  end 

  def get_ssh_nat_port
    return @ssh_nat_port
  end 

  def get_bridged_interface
    return @bridged_interface
  end 
end

controller = Node.new("CTRL"	, [1,8]		, 22201)
c_node_1   = Node.new("C-NODE-1", [2,9,15]	, 22202)
user_node  = Node.new("USER"	, [16]		, 22203)
serv_node  = Node.new("SERVER"	, [17]		, 22204)

mgmt_sw    = Node.new("MGMT-SW"	, (1..7)	, 22210)
svc_sw     = Node.new("SVC-SW"	, (8..14)	, 22211)
vnf_sw     = Node.new("VNF-SW"	, (15..20)	, 22212, "eth0")

nodes = [ controller, c_node_1, user_node, serv_node ]
switches = [ mgmt_sw, svc_sw, vnf_sw ]

# Controller의 80번 포트를 8888으로 nat
link_prefix="openstack"
http_nat_port=8888

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  
  nodes.each do | node |
    hostname 		= node.get_hostname
    ssh_nat_port 	= node.get_ssh_nat_port
    interfaces 		= node.get_interfaces

    config.vm.define "#{hostname}" do |cfg_node|
      cfg_node.vm.box = "myubuntu"
      cfg_node.vm.boot_timeout = 300
      # Run our shell script on provisioning
      cfg_node.vm.provision :shell, :path => "init_node_#{hostname}.sh"
  	
      # NAT이외에 intnet 인터페이스 2개를 생성
      # switch_interface 1 과 2에 연결
      #for i in intf_start..intf_end
      for i in interfaces
        cfg_node.vm.network "private_network", auto_config: false, virtualbox__intnet: "#{link_prefix}_switch_interface_#{i}"  	
      end
  
      # TODO:
      # From interface 2 to intf_count, set nictype to virtio
      cfg_node.vm.provider "virtualbox" do |v|
      #  for i in 2..(intf_count+1)
      #    v.customize ["modifyvm", :id, "--nictype#{i}", "virtio"] 
      #	end
  	v.customize ["modifyvm", :id, "--hpet", "on"]
        #v.gui = true
        v.memory = 2048
        v.cpus = 2
      end  	  
  	   
      cfg_node.vm.network :forwarded_port, guest: 22, host: "#{ssh_nat_port}", id: "ssh"  
      #cfg_node.vm.network :forwarded_port, guest: 80, host: "#{http_nat_port}", id: "http"  
    end
  end
  
  switches.each do | switch |
    hostname 		= switch.get_hostname
    ssh_nat_port 	= switch.get_ssh_nat_port
    interfaces 		= switch.get_interfaces
    bridged_interface 	= switch.get_bridged_interface
 
    config.vm.define "#{hostname}" do |cfg_sw|
      cfg_sw.vm.box = "ubuntu-ovs"
      cfg_sw.vm.boot_timeout = 90
	
      # 여러 개의 인터페이스를 할당
      # 최대 생성 가능한 8개 인터페이스 중 첫 번째는 NAT, 나머지 7개는 intnet에 할당
      for i in interfaces
        cfg_sw.vm.network "private_network", auto_config: false, virtualbox__intnet: "#{link_prefix}_switch_interface_#{i}"  	
      end

      #print "bridged_interface= ", bridged_interface
      if bridged_interface != ""
        cfg_sw.vm.network "public_network", auto_config: false, bridge: "#{bridged_interface}", ip: "211.224.204.133/27"
      end
  
      cfg_sw.vm.provision :shell, :path => "init_node_#{hostname}.sh"
  	  # Virtualbox 구동시 GUI를 띄워주도록 설정m
      # GUI를 띄우지 않으면 vEOS 수행 시 boot VM에서 hang이 걸림
      # 스위칭에 이용하는 인터페이스에 대해서 promiscuous mode를 allow vms로 설정해줌
      cfg_sw.vm.provider "virtualbox" do |v|
        # TODO:
        #for i in 2..(intf_count+1)
        #  v.customize ["modifyvm", :id, "--nictype#{i}", "virtio"]
        #  v.customize ["modifyvm", :id, "--nictype#{i}", "virtio"]
  	#  v.customize ["modifyvm", :id, "--nicpromisc#{i}", "allow-all"]  	        	      
  	#end
  	v.customize ["modifyvm", :id, "--hpet", "on"]
   	#v.gui = true
   	v.memory = 2048
  	v.cpus = 4
      end
      cfg_sw.vm.network :forwarded_port, guest: 22, host: "#{ssh_nat_port}", id: "ssh"
  	
      # synced folder를 disable 시킴
      cfg_sw.vm.synced_folder ".", "/vagrant", disabled: true
    end
  end
  
end
