# -*- mode: ruby -*-
# vi: set ft=ruby :

require "../include/vnode.rb"

all_in_one = Node.new("ALL-ONE" , [1,10,13]	, 8, 8192, 22201, 22280, 26080)
user_node  = Node.new("USER"	, [8]		, 2, 2048, 22202)
serv_node  = Node.new("SERVER"	, [9]		, 2, 2048, 22203)

mgmt_sw    = Node.new("MGMT-SW"	, (1..7)	, 4, 2048, 22210)
vnf_sw     = Node.new("VNF-SW"	, (8..13)	, 4, 2048, 22211, -1, -1, "eth0")

# list of nodes and switches
nodes = [ all_in_one, user_node, serv_node ]
switches = [ mgmt_sw, vnf_sw ]

# IMPORTANT: use your own link_prefix to avoid duplication error with other vagrant instances
link_prefix="openstack"

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  
  nodes.each do | node |
    hostname 		= node.get_hostname
    cpu 		= node.get_cpu
    memory 		= node.get_memory
    ssh_nat_port 	= node.get_ssh_nat_port
    http_nat_port 	= node.get_http_nat_port
    novnc_nat_port 	= node.get_novnc_nat_port
    interfaces 		= node.get_interfaces

    interface_count	= interfaces.length 
 
    config.vm.define "#{hostname}" do |cfg_node|
      cfg_node.vm.box = "ubuntu/trusty64"
      cfg_node.vm.boot_timeout = 300

      # Run our shell script on provisioning
      cfg_node.vm.provision :shell, :path => "init_node_#{hostname}.sh"
  	
      # 여러 개의 인터페이스를 할당
      # 하나의 VM에 최대 생성 가능한 8개 인터페이스 중 첫 번째는 NAT, 나머지 7개에 대해서 다른 VM과의 연결을 고려하여 연결
      for i in interfaces
        cfg_node.vm.network "private_network", auto_config: false, virtualbox__intnet: "#{link_prefix}_switch_interface_#{i}"  	
      end
  
      cfg_node.vm.provider "virtualbox" do |v|
        for i in 2..(interface_count+1)
  	  v.customize ["modifyvm", :id, "--nicpromisc#{i}", "allow-all"]  	        	      
      	end
  	v.customize ["modifyvm", :id, "--hpet", "on"]
        #v.gui = true
        v.memory = memory
        v.cpus = cpu
      end  	  
  	   
      cfg_node.vm.network :forwarded_port, guest: 22, host: "#{ssh_nat_port}", id: "ssh"  
      if http_nat_port != -1
        cfg_node.vm.network :forwarded_port, guest: 80, host: "#{http_nat_port}", id: "http"  
      end
      if novnc_nat_port != -1
        cfg_node.vm.network :forwarded_port, guest: 6080, host: "#{novnc_nat_port}", id: "novnc"  
      end

      cfg_node.vm.synced_folder "../openstack", "/root/openstack", disabled: false
    end
  end
  
  switches.each do | switch |
    hostname 		= switch.get_hostname
    ssh_nat_port 	= switch.get_ssh_nat_port
    interfaces 		= switch.get_interfaces
    bridged_interface 	= switch.get_bridged_interface
    cpu 		= switch.get_cpu
    memory 		= switch.get_memory

    interface_count	= interfaces.size
    if bridged_interface != ""
      interface_count += 1
    end
 
    config.vm.define "#{hostname}" do |cfg_sw|
      cfg_sw.vm.box = "ubuntu-ovs"
      cfg_sw.vm.boot_timeout = 90
	
      for i in interfaces
        cfg_sw.vm.network "private_network", auto_config: false, virtualbox__intnet: "#{link_prefix}_switch_interface_#{i}"  	
      end

      # bridged interface to have external network connectivity
      if bridged_interface != ""
        cfg_sw.vm.network "public_network", auto_config: false, bridge: "#{bridged_interface}"
      end
  
      cfg_sw.vm.provision :shell, :path => "init_node_#{hostname}.sh"
      cfg_sw.vm.provider "virtualbox" do |v|
        # TODO:
        for i in 2..(interface_count + 1)
          # 스위칭에 이용하는 인터페이스에 대해서 promiscuous mode를 allow vms로 설정해줌
  	  v.customize ["modifyvm", :id, "--nicpromisc#{i}", "allow-all"]  	        	      
  	end
  	v.customize ["modifyvm", :id, "--hpet", "on"]
   	#v.gui = true
   	v.memory = memory
  	v.cpus = cpu
      end
      cfg_sw.vm.network :forwarded_port, guest: 22, host: "#{ssh_nat_port}", id: "ssh"
  	
    end
  end
  
end
